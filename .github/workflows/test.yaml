name: "build"
on:
  push:
    branches:
      - main
permissions:
  contents: read
jobs:
  test-latest:
    runs-on: ubuntu-latest
    steps:
      - uses: asg017/sqlite-versions@main
        with:
          version: "3"
      - run: ls
      - run: python3 -c "import sqlite3; print(sqlite3.sqlite_version)"
      - env:
          SCRIPT: |
            import sqlite3
            assert sqlite3.sqlite_version == "3.42.0", f"expected 3.42.0 latest, got {sqlite3.sqlite_version}"
        run: python3 -c "$SCRIPT"
  test-skip-activate:
    runs-on: ubuntu-latest
    steps:
      - uses: asg017/sqlite-versions@main
        id: sqlite-versions
        with:
          version: "3.33"
          skip-activate: true
      - env:
          SCRIPT: |
            import sqlite3
            assert sqlite3.sqlite_version == "3.33.0", f"expected default version (3.33.0) latest, got {sqlite3.sqlite_version}"

            import os
            LD_LIBRARY_PATH = os.environ.get('LD_LIBRARY_PATH')
            assert LD_LIBRARY_PATH == None, "expected LD_LIBRARY_PATH to be None, found {LD_LIBRARY_PATH}"

            from pathlib import Path
            sqlite_location = Path("${{ steps.sqlite-versions.outputs.sqlite-location }}")
            assert sqlite_location.is_dir(), "Expected sqlite-location to be a directory"

        run: python3 -c "$SCRIPT"
  test-cflags:
    runs-on: ubuntu-latest
    steps:
      - uses: asg017/sqlite-versions@main
        id: sqlite-versions
        with:
          version: "3.42"
          cflags: -DSQLITE_OMIT_JSON=1
      - run: ls
      - run: python3 -c "import sqlite3; print(sqlite3.sqlite_version)"
      - run: python3 -c "$SCRIPT"
        env:
          SCRIPT: |
            import sqlite3
            db = sqlite3.connect(':memory:')
            omit_json_used = db.execute('select sqlite_compileoption_used("SQLITE_OMIT_JSON")').fetchone()[0]
            assert omit_json_used == 1
      - run: python3 -c "$SCRIPT"
        env:
          LD_LIBRARY_PATH: ""
          SCRIPT: |
            import sqlite3
            db = sqlite3.connect(':memory:')
            omit_json_used = db.execute('select sqlite_compileoption_used("SQLITE_OMIT_JSON")').fetchone()[0]
            assert omit_json_used == 0
  test-multiple:
    strategy:
      fail-fast: false
      matrix:
        sqlite_version: ["3.39.0", "3.17.0"]
    runs-on: ubuntu-latest
    steps:
      - uses: asg017/sqlite-versions@main
        with:
          version: ${{ matrix.sqlite_version }}
      - env:
          SCRIPT: |
            import sqlite3
            assert sqlite3.sqlite_version == "${{ matrix.sqlite_version }}"
        run: python3 -c "$SCRIPT"
